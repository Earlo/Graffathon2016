int[][] TheMap = { 
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','u','u','u','u','u','u','u','u','u','u',' '}, 
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','l','f','f','f','f','f','f','f','f','f','f','r'}, 
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','l','f','f','f','f','f','f','f','f','f','f','r'},
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','u','u','u','u','u','u','u','u','u',' ',' ','l','f','f','f','f','f','f','f','f','f','f','r'}, 
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','l','f','f','f','f','f','f','f','f','f','r',' ','l','f','f','f','f','f','f','f','f','f','f','r'}, 
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','l','f','=','=','=','=','=','=','=','f','r',' ','l','f','f','f','f','f','f','f','f','f','f','r'},
{' ',' ',' ',' ',' ',' ',' ',' ',' ','u','u','u','u','u','u','u','c','f','=','=','=','=','=','=','=','f','r',' ','l','f','f','f','f','f','f','f','f','f','f','r'}, 
{' ',' ',' ',' ',' ',' ',' ',' ','l','f','f','f','f','f','f','f','f','f','=','=','=','=','=','=','=','f','c','u','c','f','f','f','f','f','f','f','f','f','f','r'}, 
{' ',' ',' ',' ',' ',' ',' ',' ','l','f','f','f','f','f','f','f','f','f','=','=','=','=','=','=','=','f','f','f','f','f','f','f','f','f','f','f','f','f','f','r'}, 
{' ','u','u','u','u','u','u',' ','l','f','f','c','d','d','d','d','c','f','=','=','=','=','=','=','=','f','f','f','f','f','f','f','f','f','f','f','f','f','f','r'}, 
{'l','f','f','f','f','f','f','r','l','f','f','r',' ',' ',' ',' ','l','f','f','f','f','f','f','f','f','f','c','d','c','f','f','f','f','f','f','f','f','f','f','r'}, 
{'l','f','f','f','f','f','f','r','l','f','f','r',' ',' ',' ',' ','l','f','f','f','f','f','f','f','f','f','r',' ','l','f','f','f','f','f','f','f','f','f','f','r'},
{'l','f','f','f','f','f','f','r','l','f','f','r',' ',' ',' ',' ','l','f','f','f','f','f','f','f','f','f','r',' ','l','f','f','f','f','f','f','f','f','f','f','r'}, 
{'l','f','f','>','f','f','f','r','l','f','f','r',' ',' ',' ',' ','l','f','f','f','f','f','f','f','f','f','r',' ','l','f','f','f','f','f','f','f','f','f','f','r'}, 
{'l','f','>','>','>','f','f','r','l','f','f','r',' ',' ',' ',' ',' ','d','d','d','c','f','c','d','d','d',' ',' ','l','f','f','f','f','f','f','f','f','f','f','r'},
{'l','f','f','>','f','f','f','r','l','f','f','r',' ',' ',' ',' ',' ',' ',' ',' ','l','f','r',' ',' ',' ',' ',' ','l','f','f','f','f','f','f','f','f','f','f','r'}, 
{'l','f','f','f','f','f','f','r','l','f','f','r',' ',' ',' ',' ',' ',' ',' ',' ','l','f','r',' ',' ',' ',' ',' ','l','f','f','f','f','f','f','f','f','f','f','r'}, 
{'l','f','f','f','f','f','f','r','l','f','f','r',' ',' ',' ',' ',' ',' ',' ',' ','l','f','r',' ',' ',' ',' ',' ',' ','c','f','c','d','d','d','d','d','d','d',' '}, 
{'l','f','f','f','f','f','f','r','l','f','f','r',' ',' ',' ',' ',' ',' ',' ',' ','l','f','r',' ',' ',' ',' ',' ',' ','l','f','r',' ',' ',' ',' ',' ',' ',' ',' '}, 
{'l','f','f','f','f','f','f','r','l','f','f','r',' ',' ',' ',' ',' ',' ',' ',' ','l','f','r',' ',' ',' ',' ',' ',' ','l','f','r',' ',' ',' ',' ',' ',' ',' ',' '}, 
{'l','f','f','f','f','f','f','r','l','f','f','r',' ',' ',' ',' ',' ',' ','u','u','c','f','c','u','u','u',' ',' ',' ','l','f','r',' ',' ',' ',' ',' ',' ',' ',' '},
{'l','f','f','f','f','f','f','r','l','f','f','r',' ','u','u','u','u','l','f','f','f','f','f','f','f','f','r',' ',' ','l','f','r',' ',' ',' ',' ',' ',' ',' ',' '}, 
{'l','f','f','f','f','f','f','r','l','f','f','r','l','f','f','f','f','c','f','c','d','d','d','d','c','f','r',' ',' ','l','f','r',' ',' ',' ',' ',' ',' ',' ',' '}, 
{'l','f','f','f','f','f','f','r','l','f','f','r','l','f','c','c','f','c','f','r',' ',' ',' ',' ','l','f','r',' ',' ','l','f','r',' ',' ',' ',' ',' ',' ',' ',' '},
{'l','f','f','f','f','f','f','r','l','f','f','r','l','f','r','l','f','c','f','r',' ',' ',' ',' ','c','f','c','u',' ','l','f','r',' ',' ',' ',' ',' ',' ',' ',' '}, 
{'l','f','f','f','f','f','f','r','l','f','f','r','l','f','r',' ','d','l','f','r',' ',' ',' ','l','f','f','f','f','r','l','f','r',' ',' ',' ',' ',' ',' ',' ',' '}, 
{'l','f','f','f','f','f','f','c','c','f','f','r','l','f','c','u','u','c','f','r',' ',' ',' ','l','f','f','f','f','c','c','f','r',' ',' ',' ',' ',' ',' ',' ',' '}, 
{'l','f','f','f','f','f','f','f','f','f','f','r','l','f','f','f','f','f','f','r',' ',' ',' ','l','f','f','f','f','f','f','f','r',' ',' ',' ',' ',' ',' ',' ',' '}, 
{'l','f','f','f','f','f','f','f','f','f','f','r','l','f','c','d','d','d','d',' ',' ',' ',' ','l','f','f','f','f','c','d','d',' ',' ',' ',' ',' ',' ',' ',' ',' '}, 
{' ','d','d','d','d','d','d','d','d','d','d','r','l','f','r',' ',' ',' ',' ',' ',' ',' ',' ','l','f','f','f','f','r',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{' ',' ','l','f','f','c','u','u','c','f','f','r','l','f','r',' ',' ',' ',' ',' ',' ',' ',' ',' ','d','c','f','c',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '}, 
{' ',' ','l','f','f','f','f','f','f','f','f','r','l','f','r',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','l','f','r',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '}, 
{' ',' ','l','f','f','f','f','f','f','f','f','r','l','f','c','u','u','u','u','u','u','u','u','u','u','c','f','r',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
{' ',' ',' ','d','d','d','d','d','d','d','d',' ','l','f','f','f','f','f','f','f','f','f','f','f','f','f','f','r',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '}, 
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','l','f','c','d','d','c','f','c','d','d','d','d','d','d','d',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '}, 
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','l','f','r',' ',' ','l','f','r',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '}, 
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','l','f','r',' ',' ','l','f','r',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '}, 
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','l','f','r',' ',' ','l','f','r',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '}, 
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','d',' ',' ',' ','l','f','r',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '}, 
{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','l','f','r',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '}};   


//void drawMap(int posX, int posY, int posZ){
void drawMap(){
  for (int i = 0; i < 40; i++) {
    for (int j = 0; j < 40; j++) {
      int point = TheMap[i][j];
      //int relX = width/2  + 200*(j - 20) - posX;
      //int relY = height/2     - posY;
      //int relZ = (200*(i - 20)) +posZ;
      //int relX = width/2  + 200*(j - 20);
      //int relY = height/2;
      
      int relX = 600  + 200*(j - 20);
      int relY = 400;
      int relZ = (200*(i - 20));
      float r = random(100);      
      PImage WTEX;
      PImage FTEX;

      if (r < 45){
        WTEX = SEMI0;
        FTEX = TILDE0;
      }
      else if( r < 90){
        WTEX = SEMI1;
        FTEX = TILDE1;
      }
      else if( r < 95 ){
        WTEX = SEMI2;
        FTEX = TILDE2;
      }
      else{
        WTEX = SEMI3;
        FTEX = TILDE3;
      }
      
      switch(point) {
        case 'l': 
          drawWall( relX+100, relY, relZ, -1, WTEX);
          break;
        case 'r': 
          drawWall( relX-100, relY, relZ, -1, WTEX);
          break;
        case 'd': 
          drawWall( relX, relY, relZ-100, 0, WTEX);
          break;
        case 'u': 
          drawWall( relX, relY, relZ+100, 0, WTEX);
          break;
        case 'c': 
          drawWall( relX+100, relY, relZ, -1, WTEX);
          drawWall( relX-100, relY, relZ, -1, WTEX);
          drawWall( relX, relY, relZ-100, 0, WTEX);
          drawWall( relX, relY, relZ+100, 0, WTEX);
          drawFloor( relX, relY, relZ, -1, FTEX, FTEX);
          break;
        case 'f':
          drawFloor( relX, relY, relZ, -1, FTEX, FTEX);
          break;          
       case '=': 
          drawFloor( relX, relY, relZ, -1, EQUAL, FTEX);
          break;          

        case '>': 
          drawWall( relX+100, relY, relZ, -1, GREAT);
          drawWall( relX-100, relY, relZ, -1, GREAT);
          drawWall( relX, relY, relZ-100, 0, GREAT);
          drawWall( relX, relY, relZ+100, 0, GREAT);
          drawFloor( relX, relY, relZ, -1, GREAT, GREAT);
          break;

        default:
          //println("Zulu");   // Does not execute
          break;
      }    
    }
  }
}